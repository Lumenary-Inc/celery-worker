###############################################################################
# General Info
###############################################################################
# Description: Define an agent-led campaign that patients can be matched into


###############################################################################
# Dependencies
###############################################################################

from pydantic import BaseModel, Field
from typing import List, TypeVar, Generic, Optional, ClassVar

from app.models.general.rid import RID, RIDEntity
from app.models.general.rid_enums import RIDRootIdentifier
from app.models.hospital.encounter import EncounterRID
from app.models.hospital.location import FacilityRID, UnitRID
from app.models.hospital.employee import EmployeeRID
from app.models.call.performance_question import PerformanceQuestion
from app.models.general.sex import Sex
from app.models.general.language import Language
from app.models.agent.agent_type import AgentType

from datetime import date
from abc import ABC

###############################################################################
# Campaigns contain verification requests for HIPAA purposes
###############################################################################


class VerificationRequests(BaseModel):
    first: bool
    last: bool
    dob: bool
    last_four_ssn: bool


###############################################################################
# Campaign Filter: Constrict the domain of available patients
###############################################################################

T = TypeVar("T")


class Filter(BaseModel, ABC):
    pass


class MinMaxFilter(Filter, Generic[T]):
    T: ClassVar[TypeVar] = T
    min_value: T
    max_value: T


class CategoricalFilter(Filter, Generic[T]):
    T: ClassVar[TypeVar] = T
    allowed_categories: List[T]


class CampaignFilterSet(BaseModel):
    facility_filter: Optional[CategoricalFilter[FacilityRID]] = None
    unit_filter: Optional[CategoricalFilter[UnitRID]] = None
    employee_filter: Optional[CategoricalFilter[EmployeeRID]] = None
    sex_filter: Optional[CategoricalFilter[Sex]] = None
    language_filter: Optional[CategoricalFilter[Language]] = None
    age_filter: Optional[MinMaxFilter[int]] = None
    encounter_start_filter: Optional[MinMaxFilter[date]] = None
    encounter_end_filter: Optional[MinMaxFilter[date]] = None


###############################################################################
# Campaign
###############################################################################


class CampaignRID(RID):
    entity_type: RIDEntity = Field(default=RIDEntity.CAMPAIGN, frozen=True)
    root_identifier: RIDRootIdentifier = Field(default=RIDRootIdentifier.PATIENT_EXPERIENCE, frozen=True)


class Campaign(BaseModel):
    rid: CampaignRID = Field(default_factory=CampaignRID.generate)
    name: str
    goal: str
    verification_requests: VerificationRequests
    campaign_filter_set: CampaignFilterSet
    desired_n_calls: int
    questions: List[PerformanceQuestion]
    agent_type: AgentType
    start_date: date
    end_date: date


# Not persisted, temporary object generated by matcher and used to write
# CallRequest objects, which are persisted
class CampaignEncountersToRequest(BaseModel):
    campaign_rid: CampaignRID
    encounters: List[EncounterRID]
